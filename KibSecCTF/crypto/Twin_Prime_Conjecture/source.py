from Crypto.Util import number
from Crypto.Util.number import bytes_to_long, long_to_bytes
import sys


def generate_p_q(bit_length=1024):
    while True:
        p = number.getPrime(bit_length)

        if number.isPrime(p + 2):
            return p, p + 2
        print(f'Skipped p = {p}', file=sys.stderr)


FLAG = 'KibSec{...}'

p, q = generate_p_q()

n = p*q
e = 2**16 + 1

print(f'e = {e}', f'n = {n}', sep='\n')

m = bytes_to_long(FLAG.encode())

assert m < n

c = pow(m, e, n)

print(f'c = {c}')
# e = 65537
# n = 12005405605846405605524638199623092779867201793201832469817016722069495101342467192353556595975897584527092334091915194654399233244956105428998868466260563175125013599757705150758569360257339833058067436754798599074448872640544484440053539837576437378353329073665989755736144047753409083159658507508724627152478893175451771993174557924767998856840057854169453118022470846890101616975451403959822998016555912707268554978235945721061200131988824993238826137357591840893236444815252848233107503100419129596655896632184019663508271983765336785099495733652267243796197776482974471541296835542579900940905046050992553062499
# c = 9232158239340643078549311148426406832780963298095935641065345297383250682706477794708853355179454452764689558233598844484635069846515390344507456057500234304623953976508300104631673727606137618591995293541335100969001912606608414747031845187484469891393839116741123501737761727022417359925059405265368776740506561814913491793896184198880575546720269070782178570889044370758981536774499923814714310163395872162503684427758044705684650063248235431213472107589070195813594660054319395607409689163975779069499885164838753961722129833885088175126021111661445419826475927703318790308686475602921579551327871526669682904164
