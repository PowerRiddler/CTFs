from Crypto.Util import number
from Crypto.Util.number import long_to_bytes


def rsa_enc(m: int, e: int, n: int) -> int:
    return pow(m, e, n)


bit_length = 1024
p, q = number.getPrime(bit_length), number.getPrime(bit_length)

e = 2**16 + 1
n = p * q

block_size = (n.bit_length() + 7) // 8

print(f'e = {e}')
print(f'n = {n}')
# e = 65537
# n = 18659301832279221285546195564968443648505438212957981856643774316011598446261121501640021839674206037297943189895518301168934127330110555890660782191350317204427400190286843068212147276879836656485460292316180960002154383201643246197309013217971166592150328688539034095153119844043215732041937627895811103455175453611021087664937107288694835190410347162070438027946466918089640203349718108864007185579311534192187353767168782686062843437738335936825371604813760719713330125829027406704592554300214818115378837673181712503669576020302951792285975490381364621915169725887856820892782649514035275210244707267243708602091

input_file = "flag"
output_file = "encrypted_data"

with open(input_file, 'rb') as f:
    file_data = f.read()

enc_bytes = b''
for byte in file_data:
    c = rsa_enc(byte, e, n)
    enc_bytes += long_to_bytes(c, block_size)

with open(output_file, 'wb') as f:
    f.write(enc_bytes)
