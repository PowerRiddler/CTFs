from Crypto.Util.number import bytes_to_long, long_to_bytes

e = 65537
n = 18659301832279221285546195564968443648505438212957981856643774316011598446261121501640021839674206037297943189895518301168934127330110555890660782191350317204427400190286843068212147276879836656485460292316180960002154383201643246197309013217971166592150328688539034095153119844043215732041937627895811103455175453611021087664937107288694835190410347162070438027946466918089640203349718108864007185579311534192187353767168782686062843437738335936825371604813760719713330125829027406704592554300214818115378837673181712503669576020302951792285975490381364621915169725887856820892782649514035275210244707267243708602091

block_size = (n.bit_length() + 7) // 8

# Read encrypted data
with open('encrypted_data', 'rb') as f:
    encrypted = f.read()

decrypted = b''

for i in range(0, len(encrypted), block_size):
    block = encrypted[i:i+block_size]
    c = bytes_to_long(block)
    # Brute-force all byte values
    for m in range(256):
        if pow(m, e, n) == c:
            decrypted += bytes([m])
            break
    else:
        raise ValueError(f"No match found for block starting at byte {i}")

# Write the result
with open('decrypted_flag', 'wb') as f:
    f.write(decrypted)

print("Decryption complete. Output saved to decrypted_flag")

